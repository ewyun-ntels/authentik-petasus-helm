apiVersion: v1
kind: ConfigMap
metadata:
  name: ak-blueprints-fixed
  namespace: {{ .Release.Namespace }}
  labels:
    app: authentik
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  petasus-full-setup.yaml: |
    version: 1
    metadata:
      name: "Petasus Complete Setup"
    entries:
      # -------------------------
      # Brand
      # -------------------------
      - model: authentik_brands.brand
        identifiers:
          default: true
        attrs:
          branding_title: "Petasus Identity Provider"
          branding_logo: "http://192.168.15.157:30880/assets/logo.svg"
          branding_favicon: "http://192.168.15.157:30880/assets/logo.svg"
          branding_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          branding_default_flow_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          ui_footer_links: []
          ui_show_footer: false
          ui_theme: "automatic"
          default_locale: "en"
          flow_authentication: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          flow_invalidation: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
          flow_recovery: !Find [authentik_flows.flow, [slug, default-recovery-flow]]
          flow_unenrollment: !Find [authentik_flows.flow, [slug, default-unenrollment-flow]]
          flow_user_settings: !Find [authentik_flows.flow, [slug, default-user-settings-flow]]
          flow_device_code: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          branding_show_logo: true
          branding_show_background: true
          branding_show_title: true

      # -------------------------
      # Users / Groups / Token
      # -------------------------
      - model: authentik_core.user
        identifiers:
          username: "akadmin"
        attrs:
          is_superuser: true
          is_staff: true

      - model: authentik_core.user
        identifiers:
          username: "petasus-api-service"
        attrs:
          name: "Petasus API Service Account"
          email: "api@petasus.local"
          is_active: true
          is_superuser: true
          type: "service_account"

      - model: authentik_core.group
        identifiers:
          name: "authentik Admins"
        attrs:
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]
            - !Find [authentik_core.user, [username, "akadmin"]]

      - model: authentik_core.group
        identifiers:
          name: "Petasus API Managers"
        attrs:
          name: "Petasus API Managers"
          is_superuser: false
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]

      - model: authentik_core.token
        identifiers:
          identifier: "petasus-api-token"
        attrs:
          user: !Find [authentik_core.user, [username, "petasus-api-service"]]
          key: "petasus-api-key-2024-secure-token"
          intent: "api"
          description: "Petasus REST API Management Token"
          expiring: false

      # -------------------------
      # OAuth2 Scope mappings
      # -------------------------
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "preferred_username"
        attrs:
          scope_name: "profile"
          description: "Preferred username for authentication"
          expression: |
            username = user.username or ""
            return {"preferred_username": username}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "sub"
        attrs:
          scope_name: "openid"
          description: "Subject identifier for OpenID"
          expression: |
            def normalize_sub(u: str) -> str:
                if not u:
                    return ""
                return str(u)
            return {"sub": normalize_sub(user.id)}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "name"
        attrs:
          scope_name: "profile"
          description: "User's full name"
          expression: |
            full_name = user.first_name + " " + user.last_name if user.first_name and user.last_name else user.username
            return {"name": full_name}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "Petasus Role Mapping"
        attrs:
          scope_name: "role"
          description: "User role information for Petasus"
          expression: |
            return {"role": request.user.attributes.get("role", "")}

      # =========================
      # MFA (Validate 1단계만, 미등록 시 자동 ENROLL)
      # =========================

      # 기본 implicit-consent의 10번 등록 스테이지는 비활성화(항상 skip)
      - model: authentik_flows.flowstagebinding
        id: default-totp-enroll-binding
        identifiers:
          order: 10
          stage: !Find [authentik_stages_authenticator_totp.authenticatortotpstage, [name, "default-authenticator-totp-setup"]]
          target: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]

      - model: authentik_policies_expression.expressionpolicy
        id: disable-default-totp-enroll
        identifiers:
          name: "Disable default TOTP enroll (order:10)"
        attrs:
          expression: |
            return False

      - model: authentik_policies.policybinding
        identifiers:
          target: !KeyOf default-totp-enroll-binding
          order: 0
          policy: !KeyOf disable-default-totp-enroll


      # TOTP 검증 스테이지 1개만 사용, 미등록이면 ENROLL로 전환
      - model: authentik_stages_authenticator_validate.authenticatorvalidatestage
        id: petasus-totp-validate
        identifiers:
          name: "Petasus - TOTP Validate"
        attrs:
          device_classes:
            - totp
          not_configured_action: configure
          configuration_stage: !Find [authentik_stages_authenticator_totp.authenticatortotpstage, [name, "default-authenticator-totp-setup"]]


      # -------------------------
      # Logout Stage on Provider Invalidation
      # -------------------------
      - model: authentik_stages_user_logout.userlogoutstage
        id: petasus-logout-stage
        identifiers:
          name: "Petasus - User Logout"

      - model: authentik_flows.flowstagebinding
        identifiers:
          order: 10
          stage: !KeyOf petasus-logout-stage
          target: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]

      # -------------------------
      # OAuth2 Provider & Application
      # -------------------------
      - model: authentik_providers_oauth2.oauth2provider
        identifiers:
          name: "Petasus Auth Provider"
        attrs:
          name: "Petasus Auth Provider"
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          signing_key: !Find [authentik_crypto.certificatekeypair, [name, "authentik Self-signed Certificate"]]
          client_type: "confidential"
          client_id: "petasus-oauth2-client-2024"
          client_secret: "petasus-oauth2-secret-k8s-2024-secure-token-12345"
          redirect_uris:
            - matching_mode: strict
              url: "http://192.168.15.157:30880/oauth/redirect/petasus-kubesphere"
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "preferred_username"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "sub"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "name"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "Petasus Role Mapping"]]
            - !Find [authentik_providers_oauth2.scopemapping, [managed, "goauthentik.io/providers/oauth2/scope-email"]]

      - model: authentik_core.application
        identifiers:
          slug: "petasus-kubesphere"
        attrs:
          name: "Petasus KubeSphere Integration"
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, "Petasus Auth Provider"]]
          policy_engine_mode: "all"
apiVersion: v1
kind: ConfigMap
metadata:
  name: ak-blueprints-fixed
  namespace: {{ .Release.Namespace }}
  labels:
    app: authentik
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  petasus-full-setup.yaml: |
    version: 1
    metadata:
      name: "Petasus Complete Setup"
    entries:
      # -------------------------
      # Brand
      # -------------------------
      - model: authentik_brands.brand
        identifiers:
          default: true
        attrs:
          branding_title: "Petasus Identity Provider"
          branding_logo: "http://192.168.15.157:30880/assets/logo.svg"
          branding_favicon: "http://192.168.15.157:30880/assets/logo.svg"
          branding_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          branding_default_flow_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          ui_footer_links: []
          ui_show_footer: false
          ui_theme: "automatic"
          default_locale: "en"
          flow_authentication: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          flow_invalidation: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
          flow_recovery: !Find [authentik_flows.flow, [slug, default-recovery-flow]]
          flow_unenrollment: !Find [authentik_flows.flow, [slug, default-unenrollment-flow]]
          flow_user_settings: !Find [authentik_flows.flow, [slug, default-user-settings-flow]]
          flow_device_code: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          branding_show_logo: true
          branding_show_background: true
          branding_show_title: true

      # -------------------------
      # Users / Groups / Token (그대로 유지 – 필요시)
      # -------------------------
      - model: authentik_core.user
        identifiers:
          username: "akadmin"
        attrs:
          is_superuser: true
          is_staff: true

      - model: authentik_core.user
        identifiers:
          username: "petasus-api-service"
        attrs:
          name: "Petasus API Service Account"
          email: "api@petasus.local"
          is_active: true
          is_superuser: true
          type: "service_account"

      - model: authentik_core.group
        identifiers:
          name: "authentik Admins"
        attrs:
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]
            - !Find [authentik_core.user, [username, "akadmin"]]

      - model: authentik_core.group
        identifiers:
          name: "Petasus API Managers"
        attrs:
          name: "Petasus API Managers"
          is_superuser: false
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]

      - model: authentik_core.token
        identifiers:
          identifier: "petasus-api-token"
        attrs:
          user: !Find [authentik_core.user, [username, "petasus-api-service"]]
          key: "petasus-api-key-2024-secure-token"
          intent: "api"
          description: "Petasus REST API Management Token"
          expiring: false

      # -------------------------
      # OAuth2 Scope mappings
      # -------------------------
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "preferred_username"
        attrs:
          scope_name: "profile"
          description: "Preferred username for authentication"
          expression: |
            username = user.username or ""
            return {"preferred_username": username}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "sub"
        attrs:
          scope_name: "openid"
          description: "Subject identifier for OpenID"
          expression: |
            def normalize_sub(u: str) -> str:
                if not u:
                    return ""
                return str(u)
            return {"sub": normalize_sub(user.id)}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "name"
        attrs:
          scope_name: "profile"
          description: "User's full name"
          expression: |
            full_name = user.first_name + " " + user.last_name if user.first_name and user.last_name else user.username
            return {"name": full_name}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "role"
        attrs:
          scope_name: "role"
          description: "User role information for Petasus"
          expression: |
            return {"role": request.user.attributes.get("role", "")}

      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "description"
        attrs:
          scope_name: "description"
          description: "User description information for Petasus"
          expression: |
            return {"description": request.user.attributes.get("description", "")}


      # (C) 등록 스테이지 존재 보장 (Helm 템플릿 충돌 피하려고 friendly_name_template 생략)
      - model: authentik_stages_authenticator_totp.authenticatortotpstage
        identifiers:
          name: "default-authenticator-totp-setup"
        attrs:
          issuer: "Petasus"
          digits: 6
          period: 30
          algorithm: "sha1"

      # --- Enforce MFA validation -> auto-enroll to TOTP when not configured ---
      - model: authentik_stages_authenticator_validate.authenticatorvalidatestage
        identifiers:
          name: "default-authentication-mfa-validation"
        attrs:
          device_classes:
            - totp
          not_configured_action: configure
          configuration_stages:
            - !Find [authentik_stages_authenticator_totp.authenticatortotpstage, [name, "default-authenticator-totp-setup"]]


      # (E) (선택) 특정 사용자만 TOTP 적용하고 싶으면 정책 사용
      - model: authentik_policies_expression.expressionpolicy
        id: petasus-require-totp-by-path
        identifiers:
          name: "Require TOTP when user.path startswith 'petasus.io'"
        attrs:
          expression: |
            u = request.user
            if not u:
              return False
            if getattr(u, "username", "") == "akadmin":
              return False
            p = getattr(u, "path", "") or ""
            return p == "petasus.io" or p.startswith("petasus.io/")


      # --- Identify the MFA validation binding (order 30) in default-authentication-flow
      - model: authentik_flows.flowstagebinding
        id: default-authn-mfa-validate-binding
        identifiers:
          order: 30
          stage: !Find [authentik_stages_authenticator_validate.authenticatorvalidatestage, [name, "default-authentication-mfa-validation"]]
          target: !Find [authentik_flows.flow, [slug, default-authentication-flow]]


      # --- Bind the policy so MFA runs only when expression returns True
      - model: authentik_policies.policybinding
        identifiers:
          target: !KeyOf default-authn-mfa-validate-binding
          order: 0
          policy: !KeyOf petasus-require-totp-by-path

      # -------------------------
      # Logout Stage on Provider Invalidation
      # -------------------------
      - model: authentik_stages_user_logout.userlogoutstage
        identifiers:
          name: "Petasus - User Logout"

      - model: authentik_flows.flowstagebinding
        identifiers:
          order: 10
          stage: !Find [authentik_stages_user_logout.userlogoutstage, [name, "Petasus - User Logout"]]
          target: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]

      # -------------------------
      # OAuth2 Provider & Application
      # -------------------------
      - model: authentik_providers_oauth2.oauth2provider
        identifiers:
          name: "Petasus Auth Provider"
        attrs:
          name: "Petasus Auth Provider"
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]
          authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          signing_key: !Find [authentik_crypto.certificatekeypair, [name, "authentik Self-signed Certificate"]]
          client_type: "confidential"
          client_id: "petasus-oauth2-client-2024"
          client_secret: "petasus-oauth2-secret-k8s-2024-secure-token-12345"
          redirect_uris:
            - matching_mode: strict
              url: "http://192.168.15.157:30880/oauth/redirect/petasus-kubesphere"
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "preferred_username"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "sub"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "name"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "role"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "description"]]
            - !Find [authentik_providers_oauth2.scopemapping, [managed, "goauthentik.io/providers/oauth2/scope-email"]]

      - model: authentik_core.application
        identifiers:
          slug: "petasus-kubesphere"
        attrs:
          name: "Petasus KubeSphere Integration"
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, "Petasus Auth Provider"]]
          policy_engine_mode: "all"
