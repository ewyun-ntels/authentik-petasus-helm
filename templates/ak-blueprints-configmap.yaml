apiVersion: v1
kind: ConfigMap
metadata:
  name: ak-blueprints-fixed
  namespace: {{ .Release.Namespace }}
  labels:
    app: authentik
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  petasus-full-setup.yaml: |
    version: 1
    metadata:
      name: "Petasus Complete Setup"
    entries:
      # Petasus Brand 생성 (기본 브랜드 수정)
      - model: authentik_brands.brand
        identifiers:
          default: true
        attrs:
          branding_title: "Petasus Identity Provider"
          branding_logo: "http://192.168.15.157:30880/assets/logo.svg"
          branding_favicon: "http://192.168.15.157:30880/assets/logo.svg"
          branding_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          ui_footer_links: []
          ui_show_footer: false
          ui_theme: "automatic"
          default_locale: "en"
          flow_authentication: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          flow_invalidation: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
          flow_recovery: !Find [authentik_flows.flow, [slug, default-recovery-flow]]
          flow_unenrollment: !Find [authentik_flows.flow, [slug, default-unenrollment-flow]]
          flow_user_settings: !Find [authentik_flows.flow, [slug, default-user-settings-flow]]
          flow_device_code: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]

      # akadmin 사용자를 superuser로 설정
      - model: authentik_core.user
        identifiers:
          username: "akadmin"
        attrs:
          is_superuser: true
          is_staff: true

      # REST API 관리용 Service Account 생성
      - model: authentik_core.user
        identifiers:
          username: "petasus-api-service"
        attrs:
          name: "Petasus API Service Account"
          email: "api@petasus.local"
          is_active: true
          is_superuser: true
          type: "service_account"

      # API Service Account를 authentik Admins 그룹에 추가 + akadmin 사용자도 추가
      - model: authentik_core.group
        identifiers:
          name: "authentik Admins"
        attrs:
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]
            - !Find [authentik_core.user, [username, "akadmin"]]

      # Petasus API 관리용 그룹 생성
      - model: authentik_core.group
        identifiers:
          name: "Petasus API Managers"
        attrs:
          name: "Petasus API Managers"
          is_superuser: false
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]

      # API 토큰 생성
      - model: authentik_core.token
        identifiers:
          identifier: "petasus-api-token"
        attrs:
          user: !Find [authentik_core.user, [username, "petasus-api-service"]]
          key: "petasus-api-key-2024-secure-token"
          intent: "api"
          description: "Petasus REST API Management Token"

      # 커스텀 Scope Mapping - Profile 확장
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "Petasus Profile Mapping"
        attrs:
          scope_name: "profile"
          description: "Enhanced profile information for Petasus"
          expression: |
            return {
                "name": request.user.name,
                "given_name": request.user.name.split(" ")[0] if " " in request.user.name else request.user.name,
                "family_name": request.user.name.split(" ")[-1] if " " in request.user.name else "",
                "preferred_username": request.user.username,
                "email": request.user.email,
                "groups": [group.name for group in request.user.ak_groups.all()],
                "roles": [group.name for group in request.user.ak_groups.all() if group.name.startswith("role_")],
                "department": request.user.attributes.get("department", ""),
                "employee_id": request.user.attributes.get("employee_id", ""),
                "petasus_user_type": "standard"
            }

      # 커스텀 Scope Mapping - Groups
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "Petasus Groups Mapping"
        attrs:
          scope_name: "groups"
          description: "Group and role information for Petasus"
          expression: |
            return {
                "groups": [group.name for group in request.user.ak_groups.all()],
                "roles": [group.name for group in request.user.ak_groups.all() if group.name.startswith("role_")],
                "permissions": [perm.codename for perm in request.user.user_permissions.all()]
            }

      # OAuth2 Provider for KubeSphere
      - model: authentik_providers_oauth2.oauth2provider
        identifiers:
          name: "Petasus Auth Provider"
        attrs:
          name: "Petasus Auth Provider"
          authorization_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
          client_type: "confidential"
          client_id: "petasus-oauth2-client-2024"
          client_secret: "petasus-oauth2-secret-k8s-2024-secure-token-12345"
          redirect_uris:
            - matching_mode: strict
              url: "http://192.168.15.157:30880/oauth/redirect/petasus-auth"
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "Petasus Profile Mapping"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "Petasus Groups Mapping"]]
            - !Find [authentik_providers_oauth2.scopemapping, [managed, "goauthentik.io/providers/oauth2/scope-openid"]]
            - !Find [authentik_providers_oauth2.scopemapping, [managed, "goauthentik.io/providers/oauth2/scope-email"]]

      # Application 생성
      - model: authentik_core.application
        identifiers:
          slug: "petasus-kubesphere"
        attrs:
          name: "Petasus KubeSphere Integration"
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, "Petasus Auth Provider"]]
          policy_engine_mode: "all"