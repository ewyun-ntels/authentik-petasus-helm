apiVersion: v1
kind: ConfigMap
metadata:
  name: ak-blueprints-fixed
  namespace: {{ .Release.Namespace }}
  labels:
    app: authentik
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  petasus-full-setup.yaml: |
    version: 1
    metadata:
      name: "Petasus Complete Setup"
    entries:
      # Petasus Brand 생성 (기본 브랜드 수정)
      - model: authentik_brands.brand
        identifiers:
          default: true
        attrs:
          branding_title: "Petasus Identity Provider"
          branding_logo: "http://192.168.15.157:30880/assets/logo.svg"
          branding_favicon: "http://192.168.15.157:30880/assets/logo.svg"
          branding_background: "http://192.168.15.157:30880/assets/resources/images/img/img_login.svg"
          ui_footer_links: []
          ui_show_footer: false
          ui_theme: "automatic"
          default_locale: "en"
          flow_authentication: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          flow_invalidation: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]
          flow_recovery: !Find [authentik_flows.flow, [slug, default-recovery-flow]]
          flow_unenrollment: !Find [authentik_flows.flow, [slug, default-unenrollment-flow]]
          flow_user_settings: !Find [authentik_flows.flow, [slug, default-user-settings-flow]]
          flow_device_code: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]

      # akadmin 사용자를 superuser로 설정
      - model: authentik_core.user
        identifiers:
          username: "akadmin"
        attrs:
          is_superuser: true
          is_staff: true

      # REST API 관리용 Service Account 생성
      - model: authentik_core.user
        identifiers:
          username: "petasus-api-service"
        attrs:
          name: "Petasus API Service Account"
          email: "api@petasus.local"
          is_active: true
          is_superuser: true
          type: "service_account"

      # API Service Account를 authentik Admins 그룹에 추가 + akadmin 사용자도 추가
      - model: authentik_core.group
        identifiers:
          name: "authentik Admins"
        attrs:
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]
            - !Find [authentik_core.user, [username, "akadmin"]]

      # Petasus API 관리용 그룹 생성
      - model: authentik_core.group
        identifiers:
          name: "Petasus API Managers"
        attrs:
          name: "Petasus API Managers"
          is_superuser: false
          users:
            - !Find [authentik_core.user, [username, "petasus-api-service"]]

      # API 토큰 생성
      - model: authentik_core.token
        identifiers:
          identifier: "petasus-api-token"
        attrs:
          user: !Find [authentik_core.user, [username, "petasus-api-service"]]
          key: "petasus-api-key-2024-secure-token"
          intent: "api"
          description: "Petasus REST API Management Token"

      # 커스텀 Scope Mapping - preferred_username
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "preferred_username"
        attrs:
          scope_name: "profile"
          description: "Preferred username for authentication"
          expression: |
            username = user.username or ""
            return {"preferred_username": username}

      # 커스텀 Scope Mapping - sub (OpenID subject identifier)
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "sub"
        attrs:
          scope_name: "openid"
          description: "Subject identifier for OpenID"
          expression: |
            def normalize_sub(u: str) -> str:
                if not u:
                    return ""
                return str(u)  # Ensure 'sub' is returned as a string
            return {"sub": normalize_sub(user.id)}

      # 커스텀 Scope Mapping - name
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "name"
        attrs:
          scope_name: "profile"
          description: "User's full name"
          expression: |
            full_name = user.first_name + " " + user.last_name if user.first_name and user.last_name else user.username
            return {"name": full_name}

      # 커스텀 Scope Mapping - Groups
      - model: authentik_providers_oauth2.scopemapping
        identifiers:
          name: "Petasus Groups Mapping"
        attrs:
          scope_name: "groups"
          description: "Group and role information for Petasus"
          expression: |
            return {
                "groups": [group.name for group in request.user.ak_groups.all()],
                "roles": [group.name for group in request.user.ak_groups.all() if group.name.startswith("role_")],
                "permissions": [perm.codename for perm in request.user.user_permissions.all()]
            }

      # =========================
      # (ADD) OIDC로 들어온 서비스 계정에게만 TOTP 강제
      # =========================

      # TOTP 검증 스테이지 (TOTP만 허용)
      - model: authentik_stages_authenticator_validate.authenticatorvalidatestage
        id: petasus-totp-validate
        identifiers:
          name: "Petasus - TOTP Validate"
        attrs:
          device_classes:
            - totp

      # 정책: (1) Petasus API Managers 그룹이고 (2) Petasus OIDC로 들어올 때만 강제
      - model: authentik_policies_expression.expressionpolicy
        id: petasus-require-totp-for-service-accounts
        identifiers:
          name: "Require TOTP for Petasus API Managers (only via Petasus OIDC)"
        attrs:
          expression: |
            in_group = "Petasus API Managers" in [g.name for g in request.user.ak_groups.all()]
            p = request.context.get("provider")
            from_provider = bool(p and p.name == "Petasus Auth Provider")
            return in_group and from_provider

      # OIDC 인증 플로우에 "기존" TOTP 등록 스테이지 바인딩 (재사용)
      - model: authentik_flows.flowstagebinding
        id: bind-petasus-totp-enroll
        identifiers:
          order: 320
          stage: !Find [authentik_stages_authenticator_totp.authenticatortotpstage, [name, "default-authenticator-totp-setup"]]
          target: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]

      # 위 바인딩에 정책 연결
      - model: authentik_policies.policybinding
        identifiers:
          target: !KeyOf bind-petasus-totp-enroll
          order: 10
          policy: !KeyOf petasus-require-totp-for-service-accounts

      # OIDC 인증 플로우에 TOTP 검증 바인딩
      - model: authentik_flows.flowstagebinding
        id: bind-petasus-totp-validate
        identifiers:
          order: 340
          stage: !KeyOf petasus-totp-validate
          target: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]

      # 검증 바인딩에도 같은 정책 연결
      - model: authentik_policies.policybinding
        identifiers:
          target: !KeyOf bind-petasus-totp-validate
          order: 10
          policy: !KeyOf petasus-require-totp-for-service-accounts

      # --- (ADD) User Logout 스테이지 생성 ---
      - model: authentik_stages_user_logout.userlogoutstage
        id: petasus-logout-stage
        identifiers:
          name: "Petasus - User Logout"

      # --- (ADD) 기본 Provider Invalidation 플로우에 Logout 스테이지 바인딩 ---
      - model: authentik_flows.flowstagebinding
        identifiers:
          order: 10
          stage: !KeyOf petasus-logout-stage
          target: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]

      # OAuth2 Provider for KubeSphere (RS256로 전환)
      - model: authentik_providers_oauth2.oauth2provider
        identifiers:
          name: "Petasus Auth Provider"
        attrs:
          name: "Petasus Auth Provider"
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]
          authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          signing_key: !Find [authentik_crypto.certificatekeypair, [name, "authentik Self-signed Certificate"]]
          client_type: "confidential"
          client_id: "petasus-oauth2-client-2024"
          client_secret: "petasus-oauth2-secret-k8s-2024-secure-token-12345"
          redirect_uris:
            - matching_mode: strict
              url: "http://192.168.15.157:30880/oauth/redirect/petasus-kubesphere"
          property_mappings:
            - !Find [authentik_providers_oauth2.scopemapping, [name, "preferred_username"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "sub"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "name"]]
            - !Find [authentik_providers_oauth2.scopemapping, [name, "Petasus Groups Mapping"]]
            - !Find [authentik_providers_oauth2.scopemapping, [managed, "goauthentik.io/providers/oauth2/scope-email"]]

      # Application 생성
      - model: authentik_core.application
        identifiers:
          slug: "petasus-kubesphere"
        attrs:
          name: "Petasus KubeSphere Integration"
          provider: !Find [authentik_providers_oauth2.oauth2provider, [name, "Petasus Auth Provider"]]
          policy_engine_mode: "all"

      # --- (ADD) 인가 플로우에 TOTP 등록 스테이지 추가 ---
      - model: authentik_flows.flowstagebinding
        id: bind-consent-flow-totp-setup
        identifiers:
          order: 10
          stage: !Find [authentik_stages_authenticator_totp.authenticatortotpstage, [name, "default-authenticator-totp-setup"]]
          target: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]
